math_list <- list(
math_list <- list(
'array' = array(c(1, 2), dim = c(2, 2, 3)),
'vector' = c(3, 9, 81),
'matrix' = matrix(data = c(9, 0, 9, 0), nrow = 2, ncol = 2)
)
math_list = list(
'array' = array(c(1, 2), dim = c(2, 2, 3)),
'vector' = c(3, 9, 81),
'matrix' = matrix(data = c(9, 0, 9, 0), nrow = 2, ncol = 2)
)
print(math_list)
View(math_list)
add_list = list("I DID IT.")
View(add_list)
print(math_list)
math_list = list(
'array' = array(c(1, 2), dim = c(2, 2, 3)),
'vector' = c(3, 9, 81),
'matrix' = matrix(data = c(9, 0, 9, 0), nrow = 2, ncol = 2)
)
math_list = c(math_list, list("I DID IT."))
print(math_list)
View(math_list)
names(math_list)[4] = 'String'
print(math_list)
View(math_list)
length(math_list)
math_list[4] = NULL
print(math_list)
View(math_list)
math_list = math_list$vector
print(math_list)
to_array = as.vector(math_list)
math_list = math_list$vector
math_list = list(
'array' = array(c(1, 2), dim = c(2, 2, 3)),
'vector' = c(3, 9, 81),
'matrix' = matrix(data = c(9, 0, 9, 0), nrow = 2, ncol = 2)
)
math_list = math_list$vector
print(math_list)
to_array = as.array(math_list)
new_matrix = math_list[, , 2]
new_matrix = math_list[,  2]
new_matrix = math_list[,, 2]
View(add_list)
math_list = list(
'array' = array(c(1, 2), dim = c(2, 2, 3)),
'vector' = c(3, 9, 81),
'matrix' = matrix(data = c(9, 0, 9, 0), nrow = 2, ncol = 2)
)
print(math_list)
add_list = list("I DID IT.")
math_list = c(math_list, list("I DID IT."))
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
data(mtcars)
View(mtcars)
head(x = mtcars, n = 5)
plot(mtcars)
install.packages("ggplot2")
data("mtcars")
View(mtcars)
plot(x = mtcars$hp, y = mtcars$wt,
main = 'Scatter Plot HorsePower VS Weight')
count_cyl = table(mtcars$cyl)
barplot(count_cyl,
main = 'count Of Cars By Cylinder',
xlab = 'Number Of Cylinder',
ylab = 'Counts Of Cars')
barplot(count_cyl,
main = 'Count Of Cars By Cylinder',
xlab = 'Number Of Cylinder',
ylab = 'Counts Of Cars')
View(mtcars)
barplot(hp~gear,
data = mtcars,
main = 'Box Plot of Gear VS HorsePower')
barplot(hp~gear,data = mtcars,
main = 'Box Plot of Gear VS HorsePower')
boxplot(hp~gear,data = mtcars,
main = 'Box Plot of Gear VS HorsePower')
hist(x = mtcars$hp,
main = 'Histogram of HorsePower')
install.packages('readxl')
library("readxl")
case_file = read_xlsx("C:/Users/DELL/Desktop/python project/r/excel/FBI Crime Data.xls")
install.packages("readxl")
library(readxl)
#file path
file_path <- "C:/Users/DELL/Desktop/python project/r/excel/FBI Crime Data.xls"
#read the Excel file
case_file = read_excel(file_path)
View(case_file)
#writting columns names
case_file[3, ]
colnames(case_file) = case_file[3, ]
print(case_file)
print(case_file, 5)
View(case_file)
case_file[, 1]
case_file[, 1]
case_file['converted_index'] = (
sapply(case_file[, 1], as.numeric)
)
case_file['converted_index'] = (
sapply(case_file[, 1], as.numeric)
)
View(case_file)
#checking NA values
is.na(case_file$converted_index)
case_file_filter = (
case_file[is.na(case_file$converted_index), ]
)
View(case_file_filter)
case_file$Year
years = substr(case_file_filter$Year, 1, 4)
years = substr(case_file_filter$Year, 1,4)
remove_col = c('Year', 'converted_index')
case_file_filter_remove = (
case_file_filter[, !colnames(case_file_filter) %in% remove_col]
)
View(case_file_filter_remove)
numeric_case_data = sapply(case_file_filter, as.numeric)
View(numeric_case_data)
View(numeric_case_data)
summary(numeric_case_data)
my_vector = c(10, 20, 30, 40)
calculate_mean = function(){
sum_vector  = sum(my_vector)
sum_vector/length(my_vector)
}
calculate_mean()
vector = c(10, 20, 30, 40)
calculate_mean_args = function(my_vector){
sum = sum(vector)
sum/length(vector)
}
calculate_mean_args(10, 20, 30, 40, 50)
calculate_mean_args(vector)
vector = c(10, 20, 30, 40, 50)
calculate_mean_args(vector)
calculate_mean = function(){
sum_vector  = sum(vector)
sum_vector/length(vector)
}
calculate_mean()
calculate_mean_args = function(my_vector){
sum = sum(vector)
sum/length(vector)
}
calculate_mean_args(vector)
calculate_mean_args = function(my_vector){
sum = sum(vector)
mean_vector = sum/length(vector)
return(mean_vector)
}
calculate_mean_args(vector)
calculate_mean_args = function(my_vector){
sum = sum(vector)
mean_vector = sum/length(vector)
return(mean_vector)
}
calculate_mean_args(vector)
calculate_mean_loop = function(vector){
sum_vector = 0
for (i in vector) {
sum_vector = sum_vector + i
print(sum_vector)
}
}
calculate_mean_loop(vector)
calculate_mean_loop = function(vector){
sum_vector = 0
for (i in vector) {
sum_vector = sum_vector + i
print(sum_vector)
}
mean_vector = sum_vector / length(vector)
return(mean_vector)
}
calculate_mean_loop(vector)
calculate_mean_loop = function(vector){
sum_vector = 0
for (i in vector) {
sum_vector = sum_vector + i
print(sum_vector)
}
mean_vector = sum_vector / length(vector)
print(mean_vector)
return(mean_vector)
}
calculate_mean_loop(vector)
calculate_mean_loop = function(vector){
sum_vector = 0
for (i in vector) {
sum_vector = sum_vector + i
}
print(sum_vector)
mean_vector = sum_vector / length(vector)
print(mean_vector)
return(mean_vector)
}
calculate_mean_loop(vector)
calculate_mean_loop = function(vector){
sum_vector = 0
for (i in vector) {
sum_vector = sum_vector + i
}
print(sum_vector)
mean_vector = sum_vector / length(vector)
print(mean_vector)
return(mean_vector)
}
calculate_mean_loop(vector)
calculate_mean_loop = function(vector){
sum_vector = 0
for (i in vector) {
sum_vector = sum_vector + i
}
mean_vector = sum_vector / length(vector)
return(mean_vector)
}
calculate_mean_loop(vector)
calculate_mean_if = function(vector){
if(class(vector == 'charcter')){
print('Plelase enter numeric value')
}
else{
sum_vector = 0
for (i in vector) {
sum_vector = sum_vector + i
}
mean_vector = sum_vector / length(sum_vector)
return(mean_vector)
}
}
calculate_mean_if(vector)
calculate_mean_if = function(vector){
if(class(vector == 'charcter')){
print('Plelase enter numeric value')
}
else{
sum_vector = 0
for (i in vector) {
sum_vector = sum_vector + i
}
mean_vector = sum_vector / length(sum_vector)
return(mean_vector)
}
}
calculate_mean_if(vector)
custom_mean_if <- function(vector) {
if (typeof(vector_example)=="character") {
print("Please provide a numeric vector!")
} else {
sum_value = 0
for (i in vector_example) {
sum_value = sum_value+i
print(sum_value)
}
mean_value = sum_value/length(vector)
return(mean_value)
}
}
custom_mean_if(vector)
custom_mean_if <- function(vector) {
if (typeof(vector)=="character") {
print("Please provide a numeric vector!")
} else {
sum_value = 0
for (i in vector) {
sum_value = sum_value+i
print(sum_value)
}
mean_value = sum_value/length(vector)
return(mean_value)
}
}
custom_mean_if(vector)
messy_df <- data.frame(
ba=c("Portugal","Spain","Italy","France",NA, "countries"),
ba=c(10, 10.4, 10.2, "14", NA, "indicator_1"),
ba=c(122, 231, 123, 333, NA, "indicator_2"),
ba=c(45, 44, 44, 24, NA, "index_1"),
ba=c(23, 21, 23, 44, NA, "index_2")
)
View(messy_df)
print(messy_df)
View(messy_df)
messy_df[, 6]
messy_df[,6]
messy_df[6, ]
headings = messy_df[6, ]
print(headings)
View(headings)
heading_vector = c(as.matrix(headings))
print(heading_vector)
colnames(messy_df) = heading_vector
View(messy_df)
tail(messy_df, 1)
cleaned_dataframe = tail(messy_df, -1)
View(cleaned_dataframe)
cleaned_dataframe =  messy_df[-nrow(messy_df), ]
View(cleaned_dataframe)
cleaned_dataframe = messy_df
print(messy_df)
View(messy_df)
View(cleaned_dataframe)
View(cleaned_dataframe)
View(cleaned_dataframe)
cleaned_dataframe =  messy_df[-nrow(messy_df), ]
print(cleaned_dataframe)
View(cleaned_dataframe)
row.names(cleaned_dataframe) = cleaned_dataframe$countries
row.names(cleaned_dataframe) = cleaned_dataframe$countries
rownames(cleaned_dataframe) = cleaned_dataframe$countries
rownames(cleaned_dataframe) = cleaned_dataframe$countries
rownames(cleaned_dataframe) = cleaned_dataframe$countries
rownames(cleaned_dataframe) = cleaned_dataframe$countries
rownames(cleaned_dataframe) = cleaned_dataframe$countries
rownames(cleaned_dataframe) = cleaned_dataframe$countries
rownames(cleaned_dataframe) = cleaned_dataframe$countries
rownames(cleaned_dataframe) = cleaned_dataframe$countries
View(cleaned_dataframe)
if (any(is.na(cleaned_dataframe$countries))) {
cleaned_dataframe$countries[is.na(cleaned_dataframe$countries)] <- "NA_value"
}
rownames(cleaned_dataframe) <- cleaned_dataframe$countries
not_so_messy_df <- cleaned_dataframe[, -which(colnames(cleaned_dataframe) == "countries")]
cleaned_dataframe$countries <- NULL
View(not_so_messy_df)
indicators = not_so_messy_df[, grepl("^indicator", colnames(not_so_messy_df))]
indexes = not_so_messy_df[, grepl("^index", colnames(not_so_messy_df))]
View(indexes)
View(indicators)
View(cleaned_dataframe)
View(not_so_messy_df)
View(indicators)
View(indexes)
revenue = c(14574.56, 7606.65, 8611.34, 9175.54, 8058.89, 8105.43, 11496.54, 9766.54, 10305.43, 14379.56, 10713.87, 15433.50)
expenses = c(12051.82, 5695.54, 12319.43, 12089.76, 8658.54, 840.43, 3285.76, 5821.34, 6976,43, 16618.84, 10054.34, 3803.76)
profit = revenue - expenses
print(profit)
tax_amount = profit * 0.3
print(tax_amount)
tax_amount = round(profit * 0.3, digits = 2)
print(tax_amount)
profit_after_tax = profit - tax_amount
print(profit_after_tax)
profit_margin = round(profit_after_tax / revenue, 2) * 100
print(profit_margin)
mean_profit_of_tax = mean(profit_after_tax)
print(mean_profit_of_tax)
good_month = profit_after_tax > mean_profit_of_tax
print(good_month)
bad_month = !good_month
print(bad_month)
best_month = profit_after_tax == max(profit_after_tax)
print(best_month)
worst_month = profit_after_tax == min(profit_after_tax)
print(worst_month)
setwd('C:/Users/DELL/Desktop/python project/r/New folder (2)')
dataframe = read.csv('./Fraud_check.csv')
head(dataframe, 5)
tail(dataframe, 5)
colnames(dataframe) = c(
"Undergraduate",
"Marital_Status",
"Taxable_Income",
"City_Population",
"work_Experience",
"Urban"
)
head(dataframe)
dataframe$Taxable_Income = ifelse(dataframe$Taxable_Income <= 30000, "risky",
"good")
head(dataframe)
dataframe$Taxable_Income = as.factor(dataframe$Taxable_Income)
head(dataframe)
str(dataframe)
library(ggplot2)
barplot(table(as.factor(dataframe$Taxable_Income),as.factor(dataframe$Marital_Status)),
xlab = "Taxable Income",
ylab = "Frequency",
legend=c("Risky","Good"))
barplot(table(as.factor(dataframe$Taxable_Income),as.factor(dataframe$Undergraduate)),
xlab = "Taxable Income",
ylab = "Frequency",
legend=c("Risky","Good"))
barplot(table(as.factor(dataframe$Taxable_Income),as.factor(dataframe$Urban)),
xlab = "Taxable Income",
ylab = "Frequency",
legend=c("Risky","Good"))
library(ggforce)
ggplot(dataframe,
aes(dataframe$Taxable_Income,
dataframe$City_Population))+
geom_sina(aes(color = dataframe$Taxable_Income), size = 1)+
scale_color_manual(values = c("#34d800","#d80400"))
ggplot(dataframe,
aes(dataframe$Taxable_Income,
dataframe$work_Experience))+
geom_sina(aes(color = dataframe$Taxable_Income), size = 1)+
scale_color_manual(values = c("#34d800","#d80400"))
View(dataframe)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
setwd('C:/Users/DELL/Desktop/python project/r/New folder (2)')
dataframe = read.csv('./Fraud_check.csv')
head(dataframe, 5)
tail(dataframe, 5)
colnames(dataframe) = c(
"Undergraduate",
"Marital_Status",
"Taxable_Income",
"City_Population",
"work_Experience",
"Urban"
)
head(dataframe)
dataframe$Taxable_Income = ifelse(dataframe$Taxable_Income <= 30000, "risky",
"good")
head(dataframe)
dataframe$Taxable_Income = as.factor(dataframe$Taxable_Income)
head(dataframe)
str(dataframe)
library(ggplot2)
barplot(table(as.factor(dataframe$Taxable_Income),as.factor(dataframe$Marital_Status)),
xlab = "Taxable Income",
ylab = "Frequency",
legend=c("Risky","Good"))
barplot(table(as.factor(dataframe$Taxable_Income),as.factor(dataframe$Undergraduate)),
xlab = "Taxable Income",
ylab = "Frequency",
legend=c("Risky","Good"))
barplot(table(as.factor(dataframe$Taxable_Income),as.factor(dataframe$Urban)),
xlab = "Taxable Income",
ylab = "Frequency",
legend=c("Risky","Good"))
library(ggforce)
ggplot(dataframe,
aes(dataframe$Taxable_Income,
dataframe$City_Population))+
geom_sina(aes(color = dataframe$Taxable_Income), size = 1)+
scale_color_manual(values = c("#34d800","#d80400"))
ggplot(dataframe,
aes(dataframe$Taxable_Income,
dataframe$work_Experience))+
geom_sina(aes(color = dataframe$Taxable_Income), size = 1)+
scale_color_manual(values = c("#34d800","#d80400"))
library(dplyr)
)
dataframe = mutate(dataframe, YesNoColumn_numeric = ifelse(YesNoColumn == "YES", 1, 0)))
# Assuming 'dataframe' is the name of your data frame
dataframe <- mutate(dataframe, YesNoColumn_numeric = ifelse(YesNoColumn == "YES", 1, 0))
rlang::last_trace()
dataframe = mutate(dataframe, dataframe$Undergraduate = ifelse(YesNoColumn == "YES", 1, 0)))
dataframe <- mutate(dataframe, Undergraduate = ifelse(YesNoColumn == "YES", 1, 0))
dataframe = mutate(dataframe, dataframe$Undergraduate = ifelse(YesNoColumn == "YES", 1, 0))
mutate(dataframe, dataframe$Undergraduate = ifelse(YesNoColumn == "YES", 1, 0))
# Assuming 'dataframe' is the name of your data frame
dataframe <- mutate(dataframe, Undergraduate = ifelse(Undergraduate == "YES", 1, 0))
library(caTools)
split <- sample.split(dataframe$Undergraduate,
SplitRatio = 0.8)
train_data <- subset(dataframe, split==TRUE)
test_data <- subset(dataframe, split==FALSE)
View(test_data)
View(train_data)
library(randomForest)
library(randomForest)
data_model = randomForest(Taxable_Income~.,data = train_data,
na.action = na.roughfix,
importance = TRUE)
library(randomForest)
data_model = randomForest(Taxable_Income~.,data = train_data,
importance = TRUE)
plot(data_model)
train_pred = predict(data_model, train_data)
mean(train_data$Taxable_Income == train_pred)
library(caret)
confusionMatrix(train_data$Taxable_Income, train_pred)
test_pred <- predict(data_model, test_data)
mean(test_data$Taxable_Income == test_pred)
confusionMatrix(test_data$Taxable_Income, test_pred)
