melons
adjusted_weights = c(1.2, 1.2, 1.2, 1.4, 1.4, 1.4)
melons * adjusted_weights
melons
melons[1]
adjusted_weights[1]
melons[1]*adjusted_weights[1]
# calculating mean
mean = mean(melons)
#calculating median
median_melon = median(melons)
#calculating standard deviation
sd(melons)
#sorting the melon weights
sort(melons)
reverse_melon = sort(melons, decreasing = TRUE)
reverse_melon
#dealing with not available
age = c(20, 22, 24, 13, 24, 46, NA)
sum(age, na.rm = TRUE)
#dealing with not a number
age = c(20, 22, 24, 13, 24, 46, NaN)
sum(age)
sum(age, na.rm = TRUE)
#melons greater than 2 kilogram
melons
melons[melons > 2]
#melons equal tp 1.2
melons == 1.2
melons != 1.2
# naming property
cities_population = c(1000, 3000, 5000, 7000, 11000)
names(cities_population)
names(cities_population) = c('Nepal', 'India', 'China', 'Italy', 'Rome')
cities_population['Nepal']
#modifying elements
melons = c(1.1, 2.2, 2.3, 4.3, 4.3, 5.5)
melons[3] = 5
melons
melons[2:4] = c(2, 3, 4)
# removing the element form the vector
new_melons = melons[-c(2.3)]
source("C:/Users/DELL/Desktop/python project/r/Vectors.R")
source("C:/Users/DELL/Desktop/python project/r/Vectors.R")
source("C:/Users/DELL/Desktop/python project/r/Vectors.R")
source("C:/Users/DELL/Desktop/python project/r/Vectors.R")
source("C:/Users/DELL/Desktop/python project/r/Vectors.R")
source("C:/Users/DELL/Desktop/python project/r/Vectors.R")
kids_age = c(12, 11, 12, 13, 14, 13, 12, 10, 12, 12, 14, 13)
mean(kids_age)
median(kids_age)
kids_age < 11 | kids_age > 13
# kids age in year
kids_age = c(12, 11, 12, 13, 14, 13, 12, 10, 12, 12, 14, 13)
#calculating mean age
mean(kids_age)
#calculating median age
median(kids_age)
# kids age less than 11 or greater than 13 in TRUE / FALSE order
kids_age < 11 | kids_age > 13
#giving names to the ages
names(kids_age) = c("John", "Rachel", "Joe", "Anne", "Theresa", "Samuel", "Marcus", "Andrew", "Kate", "Jane", "Martha", "David")
names[kids_age(2)]
names('John')
names['Anne', 'Rachel']
names[('Anne', 'Rachel')]
kids_age = c(12, 11, 12, 13, 14, 13, 12, 10, 12, 12, 14, 13)
mean(kids_age)
median(kids_age)
subset_age
subset_age = (kids_age < 11) | (kids_age > 13)
subset_age
names(kids_age) = c("John", "Rachel", "Joe", "Anne", "Theresa", "Samuel", "Marcus", "Andrew", "Kate", "Jane", "Martha", "David)
kids_age[5] = 13
kids_age
kids_age
kids_age
under_12 = kids_age < 12
ubder_12
kids_age = c(12, 11, 12, 13, 14, 13, 12, 10, 12, 12, 14, 13)
kids_age = c(12, 11, 12, 13, 14, 13, 12, 10, 12, 12, 14, 13)
mean(kids_age)
median(kids_age)
subset_age = (kids_age < 11) | (kids_age > 13)
subset_age
names(kids_age) = c("John", "Rachel", "Joe", "Anne", "Theresa", "Samuel", "Marcus", "Andrew", "Kate", "Jane", "Martha", "David")
kids_age[5] = 13
kids_age
kids_age = c(12, 11, 12, 13, 14, 13, 12, 10, 12, 12, 14, 13)
mean(kids_age)
median(kids_age)
subset_age = (kids_age < 11) | (kids_age > 13)
subset_age
names(kids_age) = c("John", "Rachel", "Joe", "Anne", "Theresa", "Samuel", "Marcus", "Andrew", "Kate", "Jane", "Martha", "David")
kids_age[5] = 13
kids_age
under_12 = (kids_age < 12)
ubder_12
under_12
product_pricing = c(5.6, 11.2, 4.5, 0.25, 1, 23)
half_price = product_pricing / 2
half_price
product_pricing
promotion = product_pricing
promotion
promotion[1] = promotion[1] * 0.2
promotion[3] = promotion[3] * 0.4
promotion[5] = promotion[5] * 0.5
promotion
promotion[1] = promotion[1] * 0.8
promotion[3] = promotion[3] * 0.4
promotion[5] = promotion[5] * 0.5
promotion
squared_prices = product_pricing^2
print(squared_prices)
subset_one_to_three = product_pricing[1:3]
print(subset_one_to_three)
maximum_price = max(product_pricing)
print(maximum_price)
num_product = length(product_pricing)
print(num_product)
transform_price = (num_product + 5) / product_pricing
print(transform_price)
source("C:/Users/DELL/Desktop/python project/r/Vector Solution.R")
boolean_vector = c(rep(TRUE, 5), rep(FALSE, 3))
print(boolean_vector)
numeric_vector = as.numeric(boolean_vector)
print(numeric_vector)
test_numeric = is.numeric(numeric_vector)
print(test_numeric)
char_vector = as.character(numeric_vector)
print(char_vector)
print(numeric_vector)
numeric_vector[5] = "5"
print(numeric_vector)
class(numeric_vector)
print(class(numeric_vector))
class(numeric_vector) == class(char_vector)
source("C:/Users/DELL/Desktop/python project/r/Data Types Solution.R")
fourdim = array(1:10, dims = c(2, 2, 1, 1))
fourdim = array(1:10, dim = c(2, 2, 1, 1))
print(fourdim)
fourdim[2, 2, 2, 2] = NA
fourdim = array(1:10, dim = c(2, 2, 2, 2))
print(fourdim)
fourdim[2, 2, 2, 2] = NA
print(fourdim)
mean_value = mean(fourdim, na.rm = TRUE)
print(mean_value)
threed = array(c(155, 261, 132000,423.4, 321, 137000,105, 240, 118000,157.64, 260, 139000).
print(threed)
threed = array(c(155, 423.4, 157.64, 261, 321, 260, 132000, 137000, 139000, 105, 240, 118000),
dim = c(3, 2, 2),
dimnames = list(c("Stock Price", "Revenue", "Employees"),
c("2018", "2019"),
c("Apple", "Microsoft")))
print(threed)
stock_price_2018 = threed("Stock Price", "2018", "Apple")
stock_price_2018 = threed["Stock Price", "2018", "Apple"]
stock_price_2019 = threed["Stock Price", "2019", "Apple"]
print(price_diff)
price_diff = stock_price_2018 - stock_price_2019
print(price_diff)
price_diff = stock_price_2019 - stock_price_2018
print(price_diff)
percentage_diff = price_diff / threed["Stock Price", "2018", "Apple"]
print(percentage_diff)
apple = threed(, , "Apple")
apple = threed[, , "Apple"]
print(apple)
stock_price = threed['Stock Price', ,]
print(stock_price)
dim_stock_price = dim(stock_price)
print(dim_stock_price)
equal = class(stock_price) == class(threed)
print(equal)
equal = identical(class(stock_price) == class(threed))
equal = identical(class(stock_price), class(threed))
print(equal)
price_vector = as.vector(stock_price['Stock Price', , 'Microsoft'])
price_vector = as.vector(stock_price["Stock Price", , "Microsoft"])
price_vector = as.vector(stock_price["Stock Price",, "Microsoft"])
price_vector <- stock_price$`Stock Price`[,"Microsoft"]
matrix_example =  matrix(c(100, 23, 42, 23, 342, 203), nrow = 3, ncol = 2)
print(matrix_example)
one_matrix = matrix_example / matrix_example
print(one_matrix)
log_column = log(matrix_example[, 1])
print(log_column)
one_matrix[, 1] = log_column
print(one_matrix)
scaled_row <- matrix_example[2, ] * 0.33
one_matrix <- matrix_example
one_matrix[2, ] <- scaled_row
print(one_matrix)
transpose_matrix = t(one_matrix)
print(transpose_matrix)
print(matrix_mul)
matrix_mul = matrix_example %*% one_matrix_t
matrix_mul = matrix_example %*% one_matrix_t
matrix_mul = matrix_example %*% transpose_matrix
print(matrix_mul)
View(matrix_example)
countries = data.frame(
country = c("Nepal", "India", "Chine"),
population = c(12000, 1345908, 2334356),
SAARC = c(TRUE, TRUE, FALSE),
stringsAsFactors = FALSE
)
print(countries)
View(countries)
str(countries)
class(countries)
typeof(countries)
countries = data.frame(
population = c(123454, 2342565, 3456536),
SAARC = c(TRUE, TRUE, FALSE),
row.names = c("Nepal", "India", "Chine"),
stringsAsFactors = FALSE
)
print(countries)
View(countries)
countries[1, 1]
countries[1, ]
countries[1, 1 , ]
countries[1, 2 , ]
countries[c('Nepal', 'China', ]
countries[c('Nepal', 'China'),  ]
countries[c('Nepal', 'China') ]
countries[c("Nepal", 'India'),  ]
print(countries)
japan = data.frame(
country = c("Japan"),
population = c(7876958),
SAARC = c(TRUE),
stringsAsFactors = FALSE
)
print(japan)
rbind(countries, japan)
View(japan)
View(countries)
View(japan)
countries = data.frame(
country = c("Nepal", "India", "Chine"),
population = c(12000, 1345908, 2334356),
SAARC = c(TRUE, TRUE, FALSE),
stringsAsFactors = FALSE
)
print(countries)
japan = data.frame(
country = c("Japan"),
population = c(7876958),
SAARC = c(TRUE),
stringsAsFactors = FALSE
)
print(japan)
rbind(countries, japan)
countries = rbind(countries, japan)
print(countries)
View(countries)
print(countries)
capital = c("Kathmandu", "New Delhi", "NaN", "Tokyo")
cbind(capital, countries)
print(countries)
View(countries)
View(japan)
View(countries)
countries = cbind(capital, countries)
print(countries)
View(countries)
print(countries)
countries = countries[1, ]
print(countries)
new_dataframe = countries[-1, ]
print(new_dataframe)
View(new_dataframe)
countries = countries[1, ]
print(countries)
countries = countries[-1, ]
print(countries)
math_list = list(
'array' = array(c(1:2), dim = 2, 2, 3 ),
'vector' = c(3, 9, 81),
'matrix' = matrix(data = c(9, 0, 9, 0), nrow = 2, ncol = 2)
)
'array' = array(c(1:2), dim = (2, 2, 3 ),
math_list = list(
'array' = array(c(1, 2), dim = c(2, 2, 3 ),
'vector' = c(3, 9, 81),
'matrix' = matrix(data = c(9, 0, 9, 0), nrow = 2, ncol = 2)
)
math_list <- list(
math_list <- list(
'array' = array(c(1, 2), dim = c(2, 2, 3)),
'vector' = c(3, 9, 81),
'matrix' = matrix(data = c(9, 0, 9, 0), nrow = 2, ncol = 2)
)
math_list = list(
'array' = array(c(1, 2), dim = c(2, 2, 3)),
'vector' = c(3, 9, 81),
'matrix' = matrix(data = c(9, 0, 9, 0), nrow = 2, ncol = 2)
)
print(math_list)
View(math_list)
add_list = list("I DID IT.")
View(add_list)
print(math_list)
math_list = list(
'array' = array(c(1, 2), dim = c(2, 2, 3)),
'vector' = c(3, 9, 81),
'matrix' = matrix(data = c(9, 0, 9, 0), nrow = 2, ncol = 2)
)
math_list = c(math_list, list("I DID IT."))
print(math_list)
View(math_list)
names(math_list)[4] = 'String'
print(math_list)
View(math_list)
length(math_list)
math_list[4] = NULL
print(math_list)
View(math_list)
math_list = math_list$vector
print(math_list)
to_array = as.vector(math_list)
math_list = math_list$vector
math_list = list(
'array' = array(c(1, 2), dim = c(2, 2, 3)),
'vector' = c(3, 9, 81),
'matrix' = matrix(data = c(9, 0, 9, 0), nrow = 2, ncol = 2)
)
math_list = math_list$vector
print(math_list)
to_array = as.array(math_list)
new_matrix = math_list[, , 2]
new_matrix = math_list[,  2]
new_matrix = math_list[,, 2]
View(add_list)
math_list = list(
'array' = array(c(1, 2), dim = c(2, 2, 3)),
'vector' = c(3, 9, 81),
'matrix' = matrix(data = c(9, 0, 9, 0), nrow = 2, ncol = 2)
)
print(math_list)
add_list = list("I DID IT.")
math_list = c(math_list, list("I DID IT."))
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
names(math_list)[4] = 'String'
print(math_list)
data(mtcars)
View(mtcars)
head(x = mtcars, n = 5)
plot(mtcars)
install.packages("ggplot2")
data("mtcars")
View(mtcars)
plot(x = mtcars$hp, y = mtcars$wt,
main = 'Scatter Plot HorsePower VS Weight')
count_cyl = table(mtcars$cyl)
barplot(count_cyl,
main = 'count Of Cars By Cylinder',
xlab = 'Number Of Cylinder',
ylab = 'Counts Of Cars')
barplot(count_cyl,
main = 'Count Of Cars By Cylinder',
xlab = 'Number Of Cylinder',
ylab = 'Counts Of Cars')
View(mtcars)
barplot(hp~gear,
data = mtcars,
main = 'Box Plot of Gear VS HorsePower')
barplot(hp~gear,data = mtcars,
main = 'Box Plot of Gear VS HorsePower')
boxplot(hp~gear,data = mtcars,
main = 'Box Plot of Gear VS HorsePower')
hist(x = mtcars$hp,
main = 'Histogram of HorsePower')
install.packages('readxl')
library("readxl")
case_file = read_xlsx("C:/Users/DELL/Desktop/python project/r/excel/FBI Crime Data.xls")
install.packages("readxl")
library(readxl)
#file path
file_path <- "C:/Users/DELL/Desktop/python project/r/excel/FBI Crime Data.xls"
#read the Excel file
case_file = read_excel(file_path)
View(case_file)
#writting columns names
case_file[3, ]
colnames(case_file) = case_file[3, ]
print(case_file)
print(case_file, 5)
View(case_file)
case_file[, 1]
case_file[, 1]
case_file['converted_index'] = (
sapply(case_file[, 1], as.numeric)
)
case_file['converted_index'] = (
sapply(case_file[, 1], as.numeric)
)
View(case_file)
#checking NA values
is.na(case_file$converted_index)
case_file_filter = (
case_file[is.na(case_file$converted_index), ]
)
View(case_file_filter)
case_file$Year
years = substr(case_file_filter$Year, 1, 4)
years = substr(case_file_filter$Year, 1,4)
remove_col = c('Year', 'converted_index')
case_file_filter_remove = (
case_file_filter[, !colnames(case_file_filter) %in% remove_col]
)
View(case_file_filter_remove)
numeric_case_data = sapply(case_file_filter, as.numeric)
View(numeric_case_data)
View(numeric_case_data)
summary(numeric_case_data)
setwd('C:/Users/DELL/Desktop/python project/r/analysis')
getwd()
walmart_data = read.csv('./walmart_data.csv')
walmart_features = read.csv('./walmart_features.csv')
n_rows = nrow(walmart_data)
print(n_rows)
head(walmart_data, 5)
rows_per_store = table(walmart_data$Store)
print(rows_per_store)
rows_per_store = as.data.frame(rows_per_store)
print(rows_per_store)
rows_per_store[order(rows_per_store$Freq), 'Var1']
sum_by_store = aggregate(
x = walmart_data$Weekly_Sales,
by = list(walmart_data$Store),
FUN = sum
)
print(sum_by_store)
colnames(sum_by_store) = c('store_number', 'total_sales')
print(sum_by_store)
barplot(sum_by_store[order(-sum_by_store$total_sales), 'total_sales'],
main = 'Sales By Store',
col = 'darkgreen')
print(walmart_features)
sapply(X = walmart_features, FUN = mean, na.rm = TRUE)
walmart_features['standerized_cpi'] = (
(walmart_features$CPI - mean(walmart_features$CPI, na.rm = TRUE))
/ sd(walmart_features$CPI, na.rm = TRUE)
)
print(walmart_features)
store_1 = walmart_data[walmart_data$Store == 1,]
print(store_1)
store_1_total = aggregate(
x = store_1$Weekly_Sales,
by = list(store_1$Date),
FUN = sum
)
print(store_1_total)
store_20 = walmart_data[walmart_data$Store == 20, ]
print(store_20)
store_20_total = aggregate(
x = store_20$Weekly_Sales,
by = list(store_20$Date),
FUN = sum
)
print(store_20_total)
library(ggplot2)
ggplot(
data = store_20_total,
aes(x = Group.1, y = x, group = 1)
) +
geom_line(color = 'darkorange') +
geom_point(color = 'darkorange') + ylab('Sales')
store_2 = walmart_data[walmart_data$Store == 2,]
print(store_2)
sales_by_department = aggregate(
x = store_2$Weekly_Sales,
by = list(store_2$Dept),
FUN = sum
)
print(store_2)
top_5_dept = sales_by_department[order(-sales_by_department$x), 'Group.1'][1:5]
top_5_dept_sales = store_2[store_2$Dept %in% top_5_dept,]
print(top_5_dept_sales)
ggplot(
data = top_5_dept_sales,
aes(x = Date, y = Weekly_Sales, group = Dept, color = Dept)
) + geom_line()
ggplot(
data = top_5_dept_sales,
aes(x = Date, y = Weekly_Sales, group = Dept, color = as.factor(Dept))
) + geom_line()
